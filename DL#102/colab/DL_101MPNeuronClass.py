# -*- coding: utf-8 -*-
"""DL_102MPNeuronClass.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1q5s8VBGDOq_PZzFow7FBu_p7VRjlkWaP
"""

# importing sklearn dataset for breastcancer data
import sklearn.datasets
# importing numpy
import numpy as np
# importing pandas as pd
import pandas as pd

# Getting data to the varialble
breast_cancer = sklearn.datasets.load_breast_cancer()
# Creating data frame
data = pd.DataFrame(breast_cancer.data,columns= breast_cancer.feature_names)
Y = breast_cancer.target

# train-test spliiting of data
from sklearn.model_selection import train_test_split
# 1st parameter = data dataframe
# 2nd parameter = target dataframe
# 3rd parameter = 90% ttraining split 10% test split
# 4th parameter = deterministic split always give same o/p  
X_train, X_test, Y_train, Y_test = train_test_split(data,Y,test_size=0.1, stratify = Y ,random_state=2)

#Binarization of MP Neuron model learninr (beccause it takes only boolean as input
X_binarised_train = X_train.apply(pd.cut,bins=2,labels=[1,0])
X_binarised_test = X_test.apply(pd.cut,bins=2,labels=[1,0])

#convert the dataframe to numpy arrays for calulation
X_binarised_test =X_binarised_test.values
X_binarised_train = X_binarised_train.values

#Object oriented learning model
from sklearn.metrics import accuracy_score
class MPNeuron:

  def __init__(self):
    self.b = None

  def model(self,x):
    return (sum(x) >= self.b)

  def predict(self,X):
    Y = []
    for x in X:
      result = self.model(x)
      Y.append(result)
    return np.array(Y)

  def accuracy(self, Y_pred, Y_test):
    print('Highest accuracy for testing data  is ', accuracy_score(Y_pred,Y_test)*100)

  def fit(self,X,Y):
    accuracy ={}

    for b in range(X.shape[1]+1):
      self.b = b
      Y_pred = self.predict(X)
      accuracy[b] = accuracy_score(Y_pred,Y) 
    
    best_b = max(accuracy, key=accuracy.get)
    self.b = best_b
    
    print('Optical value of b is',best_b)
    print('Highest accuracy for training data is ', accuracy[best_b]*100)
    return b

mp_neuron =  MPNeuron()
b = mp_neuron.fit(X_binarised_train,Y_train)
Y_pred = mp_neuron.predict(X_binarised_test)
mp_neuron.accuracy(Y_pred,Y_test)